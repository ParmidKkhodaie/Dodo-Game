<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dodo Fish Adventure</title>
<style>
  body {
    margin: 0;
    padding: 0;
    background: #0a0144;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 50px;
    overflow: hidden;
  }
  #gameCanvas {
    background: #ffffff;
    display: block;
    border: 2px solid rgb(1, 9, 64);
  }
  #scoreBoard {
    position: absolute;
    bottom: 10px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 24px;
    color: rgb(255, 255, 255);
    font-weight: bold;
  }
  #message {
    position: absolute;
    font-size: 48px;
    font-weight: bold;
    color: rgb(255, 0, 0);
    text-align: center;
    width: 100%;
    top: 40%;
    text-shadow: 2px 2px rgb(255, 255, 255);
  }
  .container {
    width: 90%;
    padding: 2rem;
  }
  @media(max-width: 600px){
    .imoji {
      width: 10vw;
    }
  }
  .btn {
    position: absolute;
    top: 60%;
    font-size: 24px;
    padding: 10px 20px;
    cursor: pointer;
  }
  #startBtn { left: 40%; }
  #exitBtn { left: 55%; }
</style>
</head>


<body>
<canvas id="gameCanvas" width="1500" height="1000"></canvas>
<div id="scoreBoard">Score: 0</div>
<div id="message"></div>
<button id="startBtn" class="btn" style="display:none;">START</button>
<button id="exitBtn" class="btn" style="display:none;">EXIT</button>

<script>
const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
const messageDiv = document.getElementById('message');
const scoreBoard = document.getElementById('scoreBoard');
const startBtn = document.getElementById('startBtn');
const exitBtn = document.getElementById('exitBtn');

const dodo = { x: canvas.width-100, y: canvas.height/2, size: 50, speed: 5, emoji: 'ü¶§', color:'#ADD8E6' };
let score = 0;
let gameOver = false;
let target = null;
let flash = null;
let invincible = false;
let flowers = [];
let waveOffset = 0;


const fishEmojis = ['üê†','üêü','üê°','üê¨','üêã','üê≥','ü¶ê'];
let fishes = [];
for(let i=0; i<24; i++){
  fishes.push({
    x: Math.random()*900 + 50,
    y: Math.random()*900 + 50,
    size: 30,
    emoji: fishEmojis[Math.floor(Math.random()*fishEmojis.length)],
    speedX: (Math.random()*2-1)*1.5,
    speedY: (Math.random()*2-1)*1.5
  });
}

const corals = [];
const minDistance = 150; 
const maxAttempts = 50;

function generateObstacle(emoji, size){
  let attempt = 0;
  while(attempt < maxAttempts){
    let x = Math.random()*(canvas.width-300)+300; 
    let y = Math.random()*(canvas.height-300)+100;
    let tooClose = corals.some(c => Math.sqrt(Math.pow(c.x-x,2)+Math.pow(c.y-y,2)) < minDistance);
    if(!tooClose){
      corals.push({x, y, emoji, size});
      break;
    }
    attempt++;
  }
}


for(let i=0;i<14;i++){
  generateObstacle('ü™∏', 40);
  generateObstacle('ü™∑', 50);
}


let enemies = [
  {x: 200, y:100, size:40, emoji:'ü¶û', speedX:2, speedY:1},
  {x: 400, y:300, size:50, emoji:'ü¶ë', speedX:1.2, speedY:1.1},
  {x: 600, y:200, size:50, emoji:'üêô', speedX:0.8, speedY:1.3},
  {x: 500, y:400, size:50, emoji:'ü™º', speedX:1.5, speedY:1}
];


function drawEntity(entity){
  ctx.font = entity.size + "px serif";
  ctx.fillStyle = entity.color || 'black';
  ctx.fillText(entity.emoji, entity.x - entity.size/2, entity.y + entity.size/2);
}

function drawBackground(){
  waveOffset += 0.5;
  const gradient = ctx.createLinearGradient(0, waveOffset, 0, canvas.height + waveOffset);
  gradient.addColorStop(0, '#00bfff');
  gradient.addColorStop(1, '#0077be');
  ctx.fillStyle = gradient;
  ctx.fillRect(0,0,canvas.width,canvas.height);
}

function drawGame(){
  drawBackground();

  fishes.forEach(f => drawEntity(f));
  corals.forEach(c => drawEntity(c));
  enemies.forEach(e => drawEntity(e));
  drawEntity(dodo);

  flowers.forEach(f => {
    ctx.font = "30px serif";
    ctx.fillText(f.emoji, f.x, f.y);
    f.y += f.speed;
  });

  if(flash){
    ctx.font = "60px serif";
    ctx.fillText('‚ö°Ô∏è', flash.x, flash.y);
  }
}

function distance(a,b){
  return Math.sqrt(Math.pow(a.x-b.x,2)+Math.pow(a.y-b.y,2));
}

function moveDodo(){
  if(target && !gameOver){
    const dx = target.x - dodo.x;
    const dy = target.y - dodo.y;
    const dist = Math.sqrt(dx*dx + dy*dy);
    if(dist < dodo.speed){
      dodo.x = target.x;
      dodo.y = target.y;
      target = null;
    } else {
      dodo.x += dx/dist*dodo.speed;
      dodo.y += dy/dist*dodo.speed;
    }
  }
}

function moveFishes(){
  fishes.forEach(f=>{
    f.x += f.speedX;
    f.y += f.speedY;
    if(f.x < f.size/2 || f.x > canvas.width - f.size/2) f.speedX *= -1;
    if(f.y < f.size/2 || f.y > canvas.height - f.size/2) f.speedY *= -1;
  });
}

function moveEnemies(){
  enemies.forEach(e=>{
    e.x += e.speedX;
    e.y += e.speedY;
    if(e.x < e.size/2 || e.x > canvas.width - e.size/2) e.speedX *= -1;
    if(e.y < e.size/2 || e.y > canvas.height - e.size/2) e.speedY *= -1;
  });
}

function checkCollision(){
  if(gameOver) return;

  for(let i=fishes.length-1; i>=0; i--){
    if(distance(dodo, fishes[i]) < (dodo.size + fishes[i].size)/2){
      score +=5;
      scoreBoard.innerText = "Score: " + score;
      fishes.splice(i,1);
    }
  }

  enemies.forEach(e=>{
    if(distance(dodo,e) < (dodo.size + e.size)/2){
      if(!invincible){
        invincible = true;
        flash = {x:dodo.x, y:dodo.y};
        score -=1;
        if(score <0) score=0;
        scoreBoard.innerText = "Score: " + score;
        setTimeout(()=>{ flash=null; invincible=false; }, 500);
        if(score ===0) showLose();
      }
    }
  });

  corals.forEach(c=>{
    if(distance(dodo,c) < (dodo.size + c.size)/2){
      showLose();
    }});

  if(fishes.length===0 && score>= 0){
    showWin();}}

function showWin(){
  gameOver = true;
  color:"#fffff"
  messageDiv.innerText = "YOU WIN!";
  messageDiv.style.color="green";
  
  for(let i=0;i<1000;i++){
    flowers.push({
      x: Math.random()*canvas.width,
      y: -Math.random()*canvas.height,
      speed: 2+Math.random()*2,
      emoji:'üå∏'});}

  setTimeout(()=> {
    messageDiv.innerText = "";
    resetGame();
  },3000)
  startBtn.style.display='inline-block';
  exitBtn.style.display='inline-block';
}

function showLose(){
  gameOver = true;
  messageDiv.innerText = "YOU LOSE!";
  messageDiv.style.color="red";
  for(let i=0;i<1000;i++){
    flowers.push({
      x: Math.random()*canvas.width,
      y: -Math.random()*canvas.height,
      speed: 2+Math.random()*2,
      emoji:'üçó'
    });
  }
  canvas.style.background='#FF0000';
  startBtn.style.display='inline-block';
  exitBtn.style.display='inline-block';
}

function resetGame(){
  dodo.x = 100; dodo.y = 500;
  target=null;
  score=0;
  scoreBoard.innerText = "Score: "+score;
  flowers=[];
  flash=null;
  invincible = false;
  gameOver=false;
  messageDiv.innerText = "";
  canvas.style.background='#00fffb';
  startBtn.style.display='none';
  exitBtn.style.display='none';

 
  fishes=[];
  for(let i=0; i<55; i++){
    fishes.push({
      x: Math.random()*700 + 50,
      y: Math.random()*500 + 50,
      size:30,
      emoji: fishEmojis[Math.floor(Math.random()*fishEmojis.length)],
      speedX:(Math.random()*2-1)*1.5,
      speedY:(Math.random()*2-1)*1.5
    });
  }
}


canvas.addEventListener('click', e=>{
  const rect = canvas.getBoundingClientRect();
  target = { x: e.clientX - rect.left, y: e.clientY - rect.top };
});

startBtn.addEventListener('click', resetGame);
exitBtn.addEventListener('click', ()=>{ window.close(); });

function gameLoop(){
  moveDodo();
  moveFishes();
  moveEnemies();
  drawGame();
  checkCollision();
  requestAnimationFrame(gameLoop);
}

gameLoop();
</script>
</body>
</html>